name: Build and Release

on:
  push:
    branches: [ master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
      fail-fast: false

    runs-on: ${{ matrix.os }}

    outputs:
      VERSION: ${{ steps.version.outputs.VERSION }}
      IS_TAG: ${{ steps.version.outputs.IS_TAG }}
      IS_BETA: ${{ steps.version.outputs.IS_BETA }}

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: latest
          cache: npm

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Cache Electron
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/electron
            ~/.cache/electron-builder
          key: ${{ runner.os }}-electron-cache-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-electron-cache-

      - name: Install dependencies with retry
        shell: bash
        run: |
          # First try with Bun
          bun upgrade --canary || true
          
          max_attempts=3
          attempt=0
          until [ $attempt -ge $max_attempts ]
          do
            bun install && break
            attempt=$((attempt+1))
            echo "Attempt $attempt failed. Retrying in 5 seconds..."
            sleep 5
          done
          if [ $attempt -eq $max_attempts ]; then
            echo "Falling back to npm installation"
            npm ci
          fi

      - name: Set version info
        id: version
        shell: bash
        run: |
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
            echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
            echo "IS_TAG=true" >> $GITHUB_OUTPUT
          else
            PKG_VERSION=$(node -p "require('./package.json').version")
            SHORT_SHA=$(git rev-parse --short HEAD)
            VERSION="v${PKG_VERSION}-beta.${SHORT_SHA}"
            echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
            echo "IS_TAG=false" >> $GITHUB_OUTPUT
          fi
          
          if echo "$VERSION" | grep -E "beta|alpha|rc" > /dev/null; then
            echo "IS_BETA=true" >> $GITHUB_OUTPUT
          else
            echo "IS_BETA=false" >> $GITHUB_OUTPUT
          fi

      # Windows Build
      - name: Build Electron app for Windows
        if: matrix.os == 'windows-latest'
        run: |
          $env:npm_config_build_from_source=false
          npm rebuild
          npx electron-builder build --win --x64 --config.asar=true
        shell: pwsh
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ELECTRON_CACHE: ~/.cache/electron
          ELECTRON_BUILDER_CACHE: ~/.cache/electron-builder

      # macOS Build
      - name: Build Electron app for macOS
        if: matrix.os == 'macos-latest'
        run: |
          export npm_config_build_from_source=false
          npm rebuild
          npx electron-builder build --mac --x64 --config.asar=true
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ELECTRON_CACHE: ~/.cache/electron
          ELECTRON_BUILDER_CACHE: ~/.cache/electron-builder

      # Linux Build
      - name: Build Electron app for Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          export npm_config_build_from_source=false
          npm rebuild
          npx electron-builder build --linux --x64 --config.asar=true
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ELECTRON_CACHE: ~/.cache/electron
          ELECTRON_BUILDER_CACHE: ~/.cache/electron-builder

      # List build outputs for debugging
      - name: List build outputs
        run: ls -la dist/
        shell: bash
        continue-on-error: true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-build
          path: |
            dist/*.exe
            dist/*.dmg
            dist/*.AppImage
            dist/*.deb
            dist/*.rpm
            dist/*.snap
            dist/*.yml
            dist/latest*.yml
            dist/latest*.yaml
          if-no-files-found: warn

  release:
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -R artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          draft: ${{ needs.build.outputs.IS_BETA == 'true' }}
          prerelease: ${{ needs.build.outputs.IS_BETA == 'true' }}
          files: artifacts/**/*
          tag_name: ${{ needs.build.outputs.VERSION }}
          name: AlrightLauncher ${{ needs.build.outputs.VERSION }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}