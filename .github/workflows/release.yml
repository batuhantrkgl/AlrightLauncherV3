name: Build, Release, and Update Beta Info

on:
  push:

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Install bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Get version information
        id: get_version
        run: |
          # Check if this is a tag push
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            # For tags, use the tag name
            VERSION=${GITHUB_REF#refs/tags/}
            echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
            echo "IS_TAG=true" >> $GITHUB_OUTPUT
          else
            # For regular commits, use package.json version + beta + short SHA
            PKG_VERSION=$(node -p "require('./package.json').version")
            SHORT_SHA=$(git rev-parse --short HEAD)
            VERSION="v${PKG_VERSION}-beta.${SHORT_SHA}"
            echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
            echo "IS_TAG=false" >> $GITHUB_OUTPUT
          fi
          
          # Check if this is a beta release
          if echo "$VERSION" | grep -E "beta|alpha|rc" > /dev/null; then
            echo "IS_BETA=true" >> $GITHUB_OUTPUT
          else
            echo "IS_BETA=false" >> $GITHUB_OUTPUT
          fi

      - name: Install dependencies
        run: bun install

      - name: Install Wine
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt-get install -y wine64 wine32

      - name: Build Electron app
        run: bun run build
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Scan with VirusTotal
        id: virustotal
        run: |
          echo "Scanning executables with VirusTotal..."
          VT_RESULTS=""
          
          # Check if API key exists
          if [ -z "${{ secrets.VT_API_KEY }}" ]; then
            echo "::warning::VirusTotal API key not found. Skipping virus scan."
            VT_RESULTS="⚠️ VirusTotal scan was skipped due to missing API key. Please add VT_API_KEY to repository secrets."
          else
            for file in dist/*.exe; do
              if [ -f "$file" ]; then
                echo "Scanning $file..."
                FILE_NAME=$(basename "$file")
                
                # Check file size before attempting to upload (limit is ~32MB for VirusTotal API)
                FILE_SIZE_BYTES=$(stat -c%s "$file")
                FILE_SIZE_MB=$(echo "scale=2; $FILE_SIZE_BYTES / 1048576" | bc)
                FILE_SIZE=$(du -h "$file" | cut -f1)
                echo "File size: $FILE_SIZE ($FILE_SIZE_MB MB)"
                
                # Skip files larger than 32MB
                if (( $(echo "$FILE_SIZE_MB > 32" | bc -l) )); then
                  echo "File too large for VirusTotal API (> 32MB), skipping automated scan"
                  # Generate hash for manual lookup on VirusTotal
                  FILE_HASH=$(sha256sum "$file" | awk '{print $1}')
                  MANUAL_LINK="https://www.virustotal.com/gui/file/$FILE_HASH/detection"
                  
                  VT_RESULTS="$VT_RESULTS\n- $FILE_NAME: ⚠️ File too large for API upload ($FILE_SIZE_MB MB). [Check manually]($MANUAL_LINK) using hash: \`$FILE_HASH\`"
                  
                  # Store hash for updates.json
                  if [ "${{ steps.get_version.outputs.IS_BETA }}" = "true" ]; then
                    echo "sha256=$FILE_HASH" >> $GITHUB_OUTPUT
                  fi
                  continue
                fi
                
                # Upload file to VirusTotal
                RESPONSE=$(curl --request POST \
                  --url https://www.virustotal.com/api/v3/files \
                  --header "x-apikey: ${{ secrets.VT_API_KEY }}" \
                  --form "file=@$file" 2>/dev/null)
                
                # Check if response is valid JSON
                if ! echo "$RESPONSE" | jq . >/dev/null 2>&1; then
                  echo "Error: Invalid JSON response from VirusTotal API"
                  echo "Response: $RESPONSE"
                  VT_RESULTS="$VT_RESULTS\n- $FILE_NAME: Failed to upload (invalid API response)"
                  continue
                fi
                
                # Check if API returned an error
                if echo "$RESPONSE" | jq -e '.error' >/dev/null 2>&1; then
                  ERROR_MSG=$(echo "$RESPONSE" | jq -r '.error.message')
                  echo "VirusTotal API error: $ERROR_MSG"
                  VT_RESULTS="$VT_RESULTS\n- $FILE_NAME: API Error - $ERROR_MSG"
                  continue
                fi
                
                # Extract analysis ID
                if ! ANALYSIS_ID=$(echo "$RESPONSE" | jq -r '.data.id' 2>/dev/null); then
                  echo "Could not extract analysis ID from response"
                  echo "Response: $RESPONSE"
                  VT_RESULTS="$VT_RESULTS\n- $FILE_NAME: Failed to get analysis ID"
                  continue
                fi
                
                echo "Analysis ID: $ANALYSIS_ID"
                
                # Wait for analysis to complete (with timeout)
                ATTEMPTS=0
                MAX_ATTEMPTS=10
                STATUS="pending"
                
                while [ $ATTEMPTS -lt $MAX_ATTEMPTS ] && [ "$STATUS" != "completed" ]; do
                  sleep 30
                  ANALYSIS_RESPONSE=$(curl --request GET \
                    --url "https://www.virustotal.com/api/v3/analyses/$ANALYSIS_ID" \
                    --header "x-apikey: ${{ secrets.VT_API_KEY }}" 2>/dev/null)
                  
                  # Check if response is valid JSON
                  if ! echo "$ANALYSIS_RESPONSE" | jq . >/dev/null 2>&1; then
                    echo "Error: Invalid JSON response when checking analysis status"
                    ATTEMPTS=$((ATTEMPTS+1))
                    continue
                  fi
                  
                  # Extract status
                  STATUS=$(echo "$ANALYSIS_RESPONSE" | jq -r '.data.attributes.status' 2>/dev/null)
                  ATTEMPTS=$((ATTEMPTS+1))
                  echo "Waiting for analysis to complete... Attempt $ATTEMPTS/$MAX_ATTEMPTS (Status: $STATUS)"
                done
                
                if [ "$STATUS" = "completed" ]; then
                  # Try to extract results
                  if MALICIOUS=$(echo "$ANALYSIS_RESPONSE" | jq -r '.data.attributes.stats.malicious' 2>/dev/null) && \
                     SUSPICIOUS=$(echo "$ANALYSIS_RESPONSE" | jq -r '.data.attributes.stats.suspicious' 2>/dev/null) && \
                     RESOURCE_ID=$(echo "$ANALYSIS_RESPONSE" | jq -r '.meta.file_info.sha256' 2>/dev/null); then
                    
                    VT_LINK="https://www.virustotal.com/gui/file/$RESOURCE_ID"
                    VT_RESULTS="$VT_RESULTS\n- $FILE_NAME: $MALICIOUS malicious, $SUSPICIOUS suspicious - [View Report]($VT_LINK)"
                    
                    # Store hash for updates.json
                    if [ "${{ steps.get_version.outputs.IS_BETA }}" = "true" ]; then
                      echo "sha256=$RESOURCE_ID" >> $GITHUB_OUTPUT
                    fi
                  else
                    VT_RESULTS="$VT_RESULTS\n- $FILE_NAME: Analysis completed but unable to extract results"
                  fi
                else
                  VT_RESULTS="$VT_RESULTS\n- $FILE_NAME: Analysis timed out or failed"
                fi
              fi
            done
          fi
          
          echo "virustotal_results<<EOF" >> $GITHUB_ENV
          echo -e "$VT_RESULTS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          name: ${{ steps.get_version.outputs.IS_BETA == 'true' && 'Beta Release ' || 'Release ' }}${{ steps.get_version.outputs.VERSION }}
          prerelease: ${{ steps.get_version.outputs.IS_BETA == 'true' || steps.get_version.outputs.IS_TAG == 'false' }}
          body: |
            ${{ steps.get_version.outputs.IS_BETA == 'true' && '## ⚠️ Beta Release' || (steps.get_version.outputs.IS_TAG == 'false' && '## Automated Build' || '## Stable Release') }}
            
            ${{ steps.get_version.outputs.IS_BETA == 'true' && 'This is a beta release and may contain bugs. Use at your own risk.' || (steps.get_version.outputs.IS_TAG == 'false' && 'This is an automated build from the latest commit.' || 'This is a stable release of AlrightLauncher.') }}
            
            ## VirusTotal Scan Results
            ${{ env.virustotal_results }}
            
            ## Release Files
          files: |
            dist/*.exe
            dist/latest.yml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Update updates.json for beta releases
      - name: Update Beta Info in updates.json
        if: steps.get_version.outputs.IS_BETA == 'true'
        run: |
          # Get release info from the created release
          VERSION="${{ steps.get_version.outputs.VERSION }}"
          VERSION=${VERSION#v}  # Remove 'v' prefix if present
          RELEASE_DATE=$(date -u +"%Y-%m-%d")
          DOWNLOAD_URL="${{ steps.create_release.outputs.upload_url }}"
          RELEASE_NOTES="${{ steps.create_release.outputs.body || github.event.release.body }}"
          SHA256="${{ steps.virustotal.outputs.sha256 }}"
          
          # Find the actual download URL for the asset
          if [[ -z "$DOWNLOAD_URL" ]]; then
            # Get the first asset URL directly from the release assets directory
            for file in dist/*.exe; do
              if [ -f "$file" ]; then
                FILENAME=$(basename "$file")
                DOWNLOAD_URL="https://github.com/${{ github.repository }}/releases/download/${{ steps.get_version.outputs.VERSION }}/$FILENAME"
                break
              fi
            done
          fi
          
          echo "Using download URL: $DOWNLOAD_URL"
          
          # Escape newlines in release notes
          RELEASE_NOTES=$(echo "$RELEASE_NOTES" | jq -sR .)
          
          # Update the updates.json file
          jq ".beta.version = \"$VERSION\" | 
              .beta.releaseDate = \"$RELEASE_DATE\" | 
              .beta.downloadUrl = \"$DOWNLOAD_URL\" | 
              .beta.sha256 = \"$SHA256\" | 
              .beta.releaseNotes = $RELEASE_NOTES" updates.json > updates.json.new
          
          mv updates.json.new updates.json
          
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add updates.json
          git commit -m "Update beta release info to ${{ steps.get_version.outputs.VERSION }}"
          git push